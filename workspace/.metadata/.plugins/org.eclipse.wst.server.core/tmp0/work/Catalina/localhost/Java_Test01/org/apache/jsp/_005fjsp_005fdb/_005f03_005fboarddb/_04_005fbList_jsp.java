/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.37
 * Generated at: 2020-01-29 05:33:21 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp._005fjsp_005fdb._005f03_005fboarddb;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import _03_board.Board;
import _03_board.BoardDao;
import java.util.Vector;

public final class _04_005fbList_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.Vector");
    _jspx_imports_classes.add("_03_board.Board");
    _jspx_imports_classes.add("_03_board.BoardDao");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>04_bList</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<div align=\"center\">\r\n");
      out.write("\t\t<h2> 전체 게시글 보기 </h2>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t");

			int pageSize= 10;
			String pageNum = request.getParameter("pageNum");
			if(pageNum ==null){
				pageNum = "1";
			}
			int count = 0;
			int number = 0;
			
			int curPage = Integer.parseInt(pageNum); 
			
			BoardDao bdao = BoardDao.getInstance();
			
			count = bdao.getAllCount();
			
			// 현재 페이지에 보여줄 시작 번호를 설정 = 데이터 베이스에서 불러올 시작번호
			int startRow = (curPage - 1) * pageSize;
			int endRow = curPage * pageSize;
			Vector<Board> vec = bdao.getAllBoard(startRow, endRow); 
			number = count - (curPage - 1) * pageSize;
		
      out.write("\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t<table border=\"1\">\r\n");
      out.write("\t\t\t<tr height=\"40\">\r\n");
      out.write("\t\t\t\t<td align=\"right\" colspan=\"5\">\r\n");
      out.write("\t\t\t\t\t<input type=\"button\" value=\"글쓰기\" onclick=\"location.href='02_bWrite.jsp'\">\r\n");
      out.write("\t\t \t\t</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\r\n");
      out.write("\t\t\t<tr height=\"40\">\r\n");
      out.write("\t\t\t\t<td width=\"50\" align=\"center\"> 번호 </td>\r\n");
      out.write("\t\t\t\t<td width=\"320\" align=\"center\"> 제목 </td>\r\n");
      out.write("\t\t\t\t<td width=\"100\" align=\"center\"> 작성자 </td>\r\n");
      out.write("\t\t\t\t<td width=\"150\" align=\"center\"> 작성일 </td>\r\n");
      out.write("\t\t\t\t<td width=\"50\" align=\"center\"> 조회수 </td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t");

		for(int i=0; i<vec.size(); i++){	
			// 벡터에 저장되어 있는 빈 클래스를 하나씩 추출
			Board bean = vec.get(i); 
      out.write("\r\n");
      out.write("\t\t\t<tr height=\"40\">\r\n");
      out.write("\t\t\t\t");
      out.write("\r\n");
      out.write("\t\t\t\t<td width=\"50\" align=\"center\"> ");
      out.print( number-- );
      out.write(" </td>\r\n");
      out.write("\t\t\t\t");
      out.write("\r\n");
      out.write("\t\t\t\t<td width=\"100\" align=\"left\"> \r\n");
      out.write("\t\t\t\t\t");

						if(bean.getRe_step() > 1){
							
							for(int j=0; j<(bean.getRe_step()-1)*5; j++){
					
      out.write("\r\n");
      out.write("\t\t\t\t\t\t&nbsp;\r\n");
      out.write("\t\t\t\t\t");
			
							}
						}
					
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t<a href=\"05_bInfo.jsp?num=");
      out.print( bean.getNum() );
      out.write("\" style=\"text-decoration: none\">\r\n");
      out.write("\t\t\t\t\t");
      out.print( bean.getSubject() );
      out.write("</a> </td>\r\n");
      out.write("\t\t\t\t<td width=\"320\" align=\"center\"> ");
      out.print( bean.getWriter() );
      out.write(" </td>\r\n");
      out.write("\t\t\t\t<td width=\"150\" align=\"center\"> ");
      out.print( bean.getReg_date() );
      out.write(" </td>\r\n");
      out.write("\t\t\t\t<td width=\"50\" align=\"center\"> ");
      out.print( bean.getReadcount() );
      out.write(" </td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t");

		}
	
      out.write("\r\n");
      out.write("\t\t</table>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\t");
      out.write("\r\n");
      out.write("\t\t<p>\r\n");
      out.write("\t \t");

			if(count > 0){
				int pageCount = count / pageSize + (count %
						pageSize == 0 ? 0 : 1);	// 카운터링 숫자를 얼마까지 보여줄건지 결정
				
				
				int startPage = 1;
				
				if(curPage % pageSize != 0){
					startPage = (int)(curPage / pageSize) * pageSize + 1;
				}else{
					startPage = ((int)(curPage / pageSize )- 1) * pageSize + 1;
				}
		
				
				int endPage = startPage + pageSize - 1;	// 화면에 보여질 페이지의 마지막 숫자
				
				if(endPage > pageCount) endPage = pageCount;
					
				// 이전이라는 링크를 만들건지 파악
				if(startPage > 10){
		
      out.write("\r\n");
      out.write("\t\t\t<a href=\"04_bList.jsp?pageNum=");
      out.print( startPage - 10 );
      out.write("\"> [이전] </a>\r\n");
      out.write("\t\t");

				}
				// 페이징 처리
				for(int i=startPage; i<=endPage; i++){
		
      out.write("\r\n");
      out.write("\t\t\t<a href=\"04_bList.jsp?pageNum=");
      out.print( i );
      out.write("\"> [");
      out.print( i );
      out.write("] </a>\r\n");
      out.write("\t\t");

					
				}
				// 다음이라는 링크를 만들건지 파악
				if(endPage < pageCount){
		
      out.write("\r\n");
      out.write("\t\t\t<a href=\"04_bList.jsp?pageNum=");
      out.print( startPage + 10 );
      out.write("\"> [다음] </a>\r\n");
      out.write("\t\t");

				}
			}
		 
      out.write("\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
